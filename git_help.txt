//------安装git
安装完成后需要初始化工作：
~
	1、当前目录设置（使用 pwd 可查看当前目录）为git仓库：这样git才能监控文件变化
	$ git init
	2、设置全局用户名和邮箱
	$ git config --global user.name "username"
	$ git config --global user.email "183.qq.com"
	3、查看用户名和密码
	$ git config user.name
	$ git config user.email
~

//------提交变化
我们将每次commit看作是一次改动的更新，改动意味着发生了变化，提交之前我们需要将变化告知git，这样能防止错误的提交。
现在，刚创建的仓库是空的，我们新建一个readme.txt文件
~
	1、告知变化使用git add命令：这里我们将需要提交的内容添加到索引库中
	$ git add readme.txt
	2、我们也可以使用其他git add命令
	$ git add .
	$ git add -A
	$ git add -i
	3、提交：当git add无错误后进行提交(注意，每次提交都应该注明更改内容)
	$ git commit -m "message"
~

//------查看状态和细节
现在我们修改了readme.txt文件，但没有及时提交，一星期后我希望查看当前状态，就需要使用git status命令。
~
	1、查看状态
	$ git status
	2、如果有变化，查看变化
	$ git diff
~

//------时光穿梭
说了半天版本控制，那git是如何进行控制的呢？这要归功于你的每一次commit。版本控制首要要用版本吧，commit其实就相当于快照，记录了你的操作，也就是每次commit就会生成一个版本号，版本号使用链表的形式串起来，git使用Head指针指向当前版本号，所以，我们将Head指针指向某个版本号即可现实“时光穿梭”。
~
	1、查看提交日志:会显示commit id即版本号，commit的作者、时间以及描述。
	$ git log
	2、切换版本：时光穿梭（通过日志信息我们可以看到版本号，然后就能实现版本切换）
	$ git reset --hard commit_id  ##commit_id代表版本号，版本号都很长，可以不用全部输入，能和其他版本号区分开就行
	$ git reset --hard head~num   ##除了使用版本号，还可以使用head^来表示当前版本，head^^表示上一个版本，以此类推，另外还可以用head~100表示当前版本的前99个版本。
	3、回到未来：如果第二天你后悔了切回之前的版本，这个时候使用git log是看不到当前版本之后的版本的，但是并不代表未来版本已经删除，我们可以使用git reflog查看历史命令。历史命令中存在我们查看过了历史版本信息，然后我们就能找到想要切回来的版本id。但是版本切换还是需要谨慎使用。
	$ git reflog
~

//------工作区和暂存区
工作区其实就是你可见的本地目录，我们在某个工作区初始化版本库后，其实git生成了很多隐藏文件，其中.git就是版本库的重要控制文件。
比如版本库中会默认一条master的分支来记录版本号和每次的commit。回想一下，我们每次commit之前都要进行add操作，即告诉git我们要提交的变化内容，其实原理是将变化内容添加到版本库的暂存区中，暂存区默认为空，而每次提交其实是将暂存区的变化提交上去。
简言之，工作区的变化需要先添加到暂存区中，然后commit的内容就是你add的内容。

//------撤销修改
如果发现刚才在工作区的修改都不需要了，可以使用git checkout -- file撤销修改，即回退到最近一次commit或add的状态。
~
	$ git checkout -- readme.txt
	$ git reset HEAD <file>       ##如果已近将不需要的内容添加到了暂存区，你可以重新提交，也可以使用该命令进行撤销暂存区内容。
~

//------删除文件
我们之前使用git add来向版本库中添加某个文件或改动，同样的，如果我们在工作区删除了某个文件，这个时候我们需要使用git rm命令来告知版本库删除的文件，然后提交，以保持工作区和版本库一致。上面说到的git checkout命令其实是使用版本库的文件替换工作区的文件，以此达到回退的效果，删除之后没有提交，我们一样可以进行撤销操作。

//远程仓库及访问
如果只是在本机上使用git就很难体现分布式开发的优越性，如果要进行分布式开发，首先我们需要一台24小时不间断工作的电脑以供多台电脑访问上面的仓库，即我们需要一个专门用来存储仓库的服务器，这样的远程仓库很多，你可以自己建一个服务器，也可以免费使用github、gitlib等。
比如我们使用github来作为远程仓库，现在我们需要注册一个github账号，然后我们就能在网站上建立自己的远程仓库了。
注意：由于在github上本地和远程之间的通信是ssh协议加密的，为了保证本地push者的身份，需要配置ssh密匙：
首先可以到主目录中查看有没有.ssh文件夹，如果有里面应该有id_rsa和id_rsa.pub两个文件，一个是私钥，一个是公钥。我们使用公钥即可。
如果没有.ssh文件夹，我们可以在电脑主目录打开git bash命令窗口，输入：
~
	$ ssh-keygen -t rsa -C "youremail@example.com"
~
一路默认回车即可在主目录下创建.ssh文件夹，复制id_rsa.pub文件中的内容，打开github添加ssh即可用本机访问远程仓库了。

//本地关联远程库并推送
~
	1、关联远程仓库
	$ git remote add origin git@github.com:fongzhizhi/git-helper.git   ##remote是远程的意思，然后add origin之后跟远程仓库的ssh地址即可关联成功。
	2、使用git push推送内容把本地库的内容推送到远程，用git push命令，实际上是把本地仓库的当前分支master推送到远程。由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。(所以我们push的不是工作区而是本地仓库的内容)
	$ git push -u origin master
	3、之后就可以不再使用-u参数了
	$ git push origin master
~

//克隆
既然可以从本地push到远程，也就能从远处仓库clone到本地。（貌似克隆到本地后本地就变成了一个git仓库了）
~
	git clone git@github.com:fongzhizhi/git-helper.git   ##其实地址不只能是ssh地址，github还支持其他类似http协议的地址，但是ssh相对安全和快速。
~

//分支branch
分支是协同开发比较重要的概念，在svn等集中式版本控制软件中，开分支和合并分支都是比较麻烦的事，但是在git中这是极其简单的事，因为新建一个分支只是做了小小的改动就能实现。
之前我们提到Head指针指向当前版本，而master是默认唯一分支，master就行一条时间线，每次commit都会记录一次，已达到版本控制的效果，而Head并不是直接指向当前commit版本的，其实在每一条分支都有一个指针，比如master分支就有master指针指向当前版本，然后再用Head指针指向master指针，这样Head就指向了当前版本。
为什么这么设置呢？这样在新建分支时大有用处。比如我们在master分支上新建了一个dev分支，可能你觉得dev和master一摸一样是进行了clone，其实git新建分支其实就是新建了一个指针，这里我们新建一个dev分支其实就是新建一个dev指针，而dev指针直接指向当前版本。这样其实不是多了一个分支，而是多了一个指针而已，但是已近达到了新分支的效果。
然后我们需要在新分支dev上工作，我们就要切换分支，这个操作很简单，就是把Head指针指向dev指针，当我们修改了文件并commit、push之后，发现dev分支变化而master或其他分支没有变化，这是因为master指针和其他分支指针都不会变化，还是指向之前的版本。这样就能达到使用指针控制版本，使用指针模拟新分支的效果。
所以，思想是很重要，解决问题的方法很多，但是解决问题的思想可以决定解决问题的优劣。
而合并分支也变得简单起来，只要把当前master分支指向dev指向的版本即可。然后删除分支只需要删除指针即可。
~
	1、查看当前分支
	$ git branch
	2、新建分支
	$ git checkout dev  ##dev是新分支名
	3、切换分支
	$ git branch dev
	4、创建并切换分支
	$ git checkout -b dev
	5、合并分支
	$ git merge dev
	6、删除分支
	$ git branch -d dev
~

//分支冲突
git推荐大量使用合并进行工作，但是分支合并时也会发生一些问题。